(00)
124E - 1NNN - JUMP TO ADDRESS $24E (i.e. $4E)
EAAC - DATA (== "ok") (POINTED AT INSTRUCTION $262 (i.e. $62); USED BY DRAWING INSTRUCCTION $268 (i.e. $68)) + (POINT,DRAW) = ($278, $27A), ($28A, $28C)
AAEA - DATA
CEAA - DATA (== "no") (POINTED AT INSTRUCTION $274 (i.e. $74); USED BY DRAWING INSTRUCCTION $??? (i.e. $??)) + (POINT,DRAW) = ($286, $???)
AAAE - DATA
E0A0 - DATA (== "0") (POINTED AT INSTRUCTION $2C8 (i.e. $C8))
A0E0 - DATA
C040 - DATA (== "1") (POINTED AT INSTRUCTION $2EE (i.e. $EE))

(10)
40E0 - DATA
E020 - DATA (== "2") (POINTED AT INSTRUCTION $304 (i.e. $104))
C0E0 - DATA
E060 - DATA (== "3") (POINTED AT INSTRUCTION $25A (i.e. $5A); USED BY DRAWING INSTRUCCTION $25C (i.e. $5C))
20E0 - DATA
A0E0 - DATA (== "4") (POINTED AT INSTRUCTION $26C (i.e. $6C); USED BY DRAWING INSTRUCCTION $26E (i.e. $6E))
2020 - DATA
6040 - DATA (== "5") (POINTED AT INSTRUCTION $27E (i.e. $7E); USED BY DRAWING INSTRUCCTION $280 (i.e. $80))

(20)
2040 - DATA
E080 - DATA (== "6") (POINTED AT INSTRUCTION $36A (i.e. $16A))
E0E0 - DATA
E020 - DATA (== "7") (POINTED AT INSTRUCTION $290 (i.e. $90))
2020 - DATA
E0E0 - DATA (== "8") (POINTED AT INSTRUCTION $2D6 (i.e. $D6))
A0E0 - DATA
E0E0 - DATA (== "9") (POINTED AT INSTRUCTION $2A4 (i.e. $A4))

(30)
20E0 - DATA
40A0 - DATA (== "A") (POINTED AT INSTRUCTION $2B6 (i.e. $B6))
E0A0 - DATA
E0C0 - DATA (== "E") (POINTED AT INSTRUCTION $2CC (i.e. $CC))
80E0 - DATA
E080 - DATA (== "F") (POINTED AT INSTRUCTION $392 (i.e. $192))
C080 - DATA
A040 - DATA (== "x") (POINTED AT INSTRUCTION $25E (i.e. $5E); USED BY DRAWING INSTRUCCTION $260 (i.e. $60)) + (POINT,DRAW) = ($270, $272), ($282, $284)

(40)
A0A0 - DATA
A202 - ANNN (CALL FROM ADDRESS $2BE (i.e. $BE))
DAB4 - DXYN
00EE - 00EE - RETURN FROM SUBROUTINE (BACK TO NEXT INSTRUCTION $2C0 (i.e. $C0))
A202 - ANNN (JUMP FROM ADDRESS $3DA (i.e. $1DA))
DAB4 - DXYN
13DC - 1NNN - JUMP TO ADDRESS $3DC (i.e. $1DC)
6801 - 6XNN - V8 = $01 (JUMP FROM ADDRESS $200 (i.e. $0))

(50)
6905 - 6XNN - V9 = $05
6A0A - 6XNN - VA = $0A
6B01 - 6XNN - VB = $01
652A - 6XNN - V5 = $2A
662B - 6XNN - V6 = $2B
A216 - ANNN - I = $216 (i.e. $16)
D8B4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $216 (i.e. $16)) AT LOCATION (V8 == $01, VB == $01)
A23E - ANNN - I = $23E (i.e. $3E)

(60)
D9B4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $23E (i.e. $3E)) AT LOCATION (V9 == $05, VB == $01)
A202 - ANNN - I = $202 (i.e. $02)
362B - 3XNN - V6 (== $2B) == 2B ? TRUE; DO SKIP NEXT INSTRUCTION $266 (i.e. $66) (JUMP TO $268 (i.e. $68))
A206 - 
DAB4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $202 (i.e. $2)) AT LOCATION (VA == $0A, VB == $01)
6B06 - 6XNN - VB = $06
A21A - ANNN - I = $21A (i.e. $1A)
D8B4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $21A (i.e. $1A)) AT LOCATION (V8 == $01, VB == $06)

(70)
A23E - ANNN - I = $23E (i.e. $3E)
D9B4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $21A (i.e. $1A)) AT LOCATION (V9 == $05, VB == $06)
A206 - ANNN - I = $206 (i.e. $06)
452A - 4XNN - V5 (== $2A) != 2A ? FALSE; DO NOT SKIP NEXT INSTRUCTION $278 (i.e. $78)
A202 - ANNN - I = $202 (i.e. $02)
DAB4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $21A (i.e. $1A)) AT LOCATION (VA == $0A, VB == $06)
6B0B - 6XNN - VB = $0B
A21E - ANNN - I = $21E (i.e. $1E)

(80)
D8B4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $21A (i.e. $1A)) AT LOCATION (V8 == $01, VB == $0B)
A23E - ANNN - I = $23E (i.e. $3E)
D9B4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $23E (i.e. $3E)) AT LOCATION (V9 == $05, VB == $0B)
A206 - ANNN - I = $206 (i.e. $06)
5560 - 5XY0 - V5 (== $2A) == V6 (== $2B) ? FALSE; DO NOT SKIP NEXT INSTRUCTION $28A (i.e. $8A)
A202 - ANNN - I = $202 (i.e. $02)
DAB4 - DXYN - DRAW SPRITE 8x4 (START READ AT I == $202 (i.e. $02)) AT LOCATION (VA == $0A, VB == $0B)
6B10 - 6XNN - VB = $10

(90) ... LAZY FROM HERE ON ...
A226 - ANNN
D8B4 - DXYN
A23E - ANNN
D9B4 - DXYN
A206 - ANNN
76FF - 7XNN - V6 (== $2B) += $FF = $2A
462A - 4XNN - V6 (== $2A) != 2A ? FALSE; DO NOT SKIP NEXT INSTRUCTION $29E (i.e. $9E)
A202 - ANNN

(A0)
DAB4 - DXYN
6B15 - 6XNN - VB = $15
A22E - ANNN
D8B4 - DXYN
A23E - ANNN
D9B4 - DXYN
A206 - ANNN
9560 - 9XY0 - V5 (== $2A) != V6 (== $2A) ? FALSE; DO NOT SKIP NEXT INSTRUCTION $2B0 (i.e. $B0)

(B0)
A202 - ANNN
DAB4 - DXYN
6B1A - 6XNN - VB = $1A
A232 - ANNN
D8B4 - DXYN
A23E - ANNN
D9B4 - DXYN
2242 - 2NNN - CALL (JUMP, RUN AND FINALLY BACK TO NEXT INSTRUCTION $2C0 (i.e. $C0)) AT $242 (i.e. $42)

(C0)
6817 - 6XNN - V8 = $17
691B - 6XNN - V9 = $1B
6A20 - 6XNN - VA = $20
6B01 - 6XNN - VB = $01
A20A - ANNN
D8B4 - DXYN
A236 - ANNN
D9B4 - DXYN

(D0)
A202 - ANNN
DAB4 - DXYN
6B06 - 6XNN - VB = $06
A22A - ANNN
D8B4 - DXYN
A20A - ANNN
D9B4 - DXYN
A206 - ANNN

(E0)
8750 - 8XY0 - V7 = V5 (== $2A) = $2A
472A - 4XNN - V7 (== $2A) != $2A ? FALSE; DO NOT SKIP NEXT INSTRUCTION $2E4 (i.e. $E4)
A202 - ANNN
DAB4 - DXYN
6B0B - 6XNN - VB = $0B
A22A - ANNN
D8B4 - DXYN
A20E - ANNN

(F0)
D9B4 - DXYN
A206 - ANNN
672A - 6XNN - V7 = $2A
87B1 - 8XY1 - V7 = (V7 (== $2A) OR VB (== $0B)) = $2B
472B - 4XNN - V7 (== $2B) != $2B ? FALSE; DO NOT SKIP NEXT INSTRUCTION $2FA (i.e. $FA)
A202 - ANNN
DAB4 - DXYN
6B10 - 6XNN - VB = $10

(100)
A22A - ANNN
D8B4 - DXYN
A212 - ANNN
D9B4 - DXYN
A206 - ANNN
6678 - 6XNN - V6 = $78
671F - 6XNN - V7 = $1F
8762 - 8XY2 - V7 = (V7 (== $1F) AND V6 (== $78)) = $18

(110)
4718 - 4XNN - V7 (== $18) != $18 ? FALSE; DO NOT SKIP NEXT INSTRUCTION $312 (i.e. $112)
A202 - ANNN
DAB4 - DXYN
6B15 - 6XNN - VB = $15
A22A - ANNN
D8B4 - DXYN
A216 - ANNN
D9B4 - DXYN

(120)
A206 - ANNN
6678 - 6XNN - V6 = $78
671F - 6XNN - V7 = $1F
8763 - 8XY3 - V7 = (V7 (== $1F) XOR V6 (== $78)) = $67
4767 - 4XNN - V7 (== $67) != $67 ? FALSE; DO NOT SKIP NEXT INSTRUCTION $32A (i.e. $12A)
A202 - ANNN
DAB4 - DXYN
6B1A - 6XNN - VB = $1A

(130)
A22A - ANNN
D8B4 - DXYN
A21A - ANNN
D9B4 - DXYN
A206 - ANNN
668C - 6XNN - V6 = $8C
678C - 6XNN - V7 = $8C
8764 - 8XY4 - V7 (== $8C) += V6 (== $8C) = $18 (OVERFLOW! SET VF)

(140)
4718 - 4XNN - V7 (== $18) != $18 ? FALSE; DO NOT SKIP NEXT INSTRUCTION $342 (i.e. $142)
A202 - ANNN
DAB4 - DXYN
682C - 6XNN - V8 = $2C
6930 - 6XNN - V9 = $30
6A34 - 6XNN - VA = $34
6B01 - 6XNN - VB = $01
A22A - ANNN

(150)
D8B4 - DXYN
A21E - ANNN
D9B4 - DXYN
A206 - ANNN
668C - 6XNN - V6 = $8C
6778 - 6XNN - V7 = $78
8765 - 8XY5 - V7 (== $78) -= V6 (== $8C) = $EC (UNDERFLOW! SET VF)
47EC - 4XNN - V7 (== $EC) != $EC ? FALSE; DO NOT SKIP NEXT INSTRUCTION $360 (i.e. $160)

(160)
A202 - ANNN
DAB4 - DXYN
6B06 - 6XNN - VB = $06
A22A - ANNN
D8B4 - DXYN
A222 - ANNN
D9B4 - DXYN
A206 - ANNN

(170)
66E0 - 6XNN - V6 = $E0
866E - 8XYE - V6 (== $E0) <= $1 = $C0 (MSB: 1! SET VF)
46C0 - 4XNN - V6 (== $C0) != $C0 ? FALSE; DO NOT SKIP NEXT INSTRUCTION $376 (i.e. $176)
A202 - ANNN
DAB4 - DXYN
6B0B - 6XNN - VB = $0B
A22A - ANNN
D8B4 - DXYN

(180)
A236 - ANNN
D9B4 - DXYN
A206 - ANNN
660F - 6XNN - V6 = $0F
8666 - 8XY6 - V6 (== $0F) >= $1 = $07 (LSB: 1! SET VF)
4607 - 4XNN - V6 (== $07) != $07 ? FALSE; DO NOT SKIP NEXT INSTRUCTION $38C (i.e. $18C)
A202 - ANNN
DAB4 - DXYN

(190)
6B10 - 6XNN - VB = $10
A23A - ANNN
D8B4 - DXYN
A21E - ANNN
D9B4 - DXYN
A3E8 - ANNN - I = $3E8 (i.e. $1E8)
6000 - 6XNN - V0 = $00
6130 - 6XNN - V1 = $30

(1A0)
F155 - FX55 - WRITE RANGE V0-V1 (INCLUDED) INTO MEMORY (START WRITE AT I (== $3E8 (i.e. $1E8)))
A3E9 - ANNN - I = $3E9 (i.e. $1E9)
F065 - FX65 - READ RANGE V0 (INCLUDED) FROM MEMORY (START READ AT I (== $3E9 (i.e. $1E9))) - V0 = $30
A206 - ANNN
4030 - 4XNN - V0 (== $30) != $30 ? FALSE; DO NOT SKIP NEXT INSTRUCTION $3AA (i.e. $1AA)
A202 - ANNN
DAB4 - DXYN
6B15 - 6XNN - VB = $15

(1B0)
A23A - ANNN
D8B4 - DXYN
A216 - ANNN
D9B4 - DXYN
A3E8 - ANNN - I = $3E8 (i.e. $1E8)
6689 - 6XNN - V6 = $89
F633 - FX33 - WRITE BCD OF V6 (== &89) (i.e. 137) INTO MEMORY (START WRITE AT I (== $3E8 (i.e. $1E8)))
F265 - FX65 - READ RANGE V0-V2 (INCLUDED) FROM MEMORY (START READ AT I (== $3E8 (i.e. $1E8))) - V0 = $1; V1 = $3; V2 = $7

(1C0)
A202 - ANNN
3001 - 3XNN - V0 (== $1) == $01 ? TRUE; DO SKIP NEXT INSTRUCTION
A206 - 
3103 - 3XNN - V1 (== $3) == $03 ? TRUE; DO SKIP NEXT INSTRUCTION
A206 - 
3207 - 3XNN - V2 (== $7) == $07 ? TRUE; DO SKIP NEXT INSTRUCTION
A206 - 
DAB4 - DXYN

(1D0)
6B1A - 6XNN - VB = $1A
A20E - ANNN
D8B4 - DXYN
A23E - ANNN
D9B4 - DXYN
1248 - 1NNN - JUMP TO ADDRESS $248 (i.e. $48)
13DC - 1NNN - JUMP TO ADDRESS $3DC (i.e. $1DC) (JUMP FROM ADDRESS $24C (i.e. $4C)) - INFINITE LOOP!!! (i.e. END OF PROGRAM)

*** KNOWN INSTRUCTIONS

1NNN - JUMP TO ADDRESS NNN
6XNN - SET VX TO CONSTANT NN
ANNN - SET I TO ADDRESS NNN
DXYN - DRAW SPRITE 8xN (START READ AT I) AT LOCATION (VX,VY)
3XNN (new) - SKIP NEXT INSTRUCTION IF VX == NN
4XNN (new) - SKIP NEXT INSTRUCTION IF VX != NN
5XY0 (new) - SKIP NEXT INSTRUCTION IF VX == VY
7XNN - ADD CONSTANT NN TO VX
9XY0 (new) - SKIP NEXT INSTRUCTION IF VX != VY
2NNN (new) - CALL SUBROUTINE AT NNN
00EE (new) - RETURN FROM SUBROUTINE
8XY0 (new) - SET VX TO VY
8XY1 (new) - SET VX TO (VX OR VY)
8XY2 (new) - SET VX TO (VX AND VY)
8XY3 (new) - SET VX TO (VX XOR VY)
8XY4 (new) - SET VX TO (VX + VY) (i.e. ADD VY TO VX) - SET VF ON OVERFLOW
8XY5 (new) - SET VX TO (VX - VY) (i.e. SUBSTRACT VY TO VX) - SET VF ON UNDERFLOW
8XYE (new) - LEFT-SHIFT VX BY 1 (SET VF TO ORIGINAL VX MSB)
8XY6 (new) - RIGHT-SHIFT VX BY 1 (SET VF TO ORIGINAL VX LSB)
FX55 (new) - WRITE RANGE V0-VX (INCLUDED) INTO MEMORY (START WRITE AT I)
FX65 (new) - READ RANGE V0-VX (INCLUDED) FROM MEMORY (START READ AT I)
FX33 (new) - WRITE BCD OF VX INTO MEMORY (START WRITE AT I)

*** NOTES

This program repeats same instruction set for every being tested CHIP-8 instruction:
- Draw the alias of being tested CHIP-8 instruction.
- Execute being tested CHIP-8 instruction.
- Draw "ok" sprite (4 Byte starting at address $202 (i.e. $02)) if succeeded; otherwise, draw "no" sprite (4 Byte starting at address $206 (i.e. $06)).

Warning! Some CHIP-8 instructions that write to memory (e.g. FX55) may appear to be wrong because the memory address used is outside the program memory (e.g. F155 starts writing to address $3E8 when the program memory ends at $3DB). This is absolutely correct since the program should not overwrite itself, so writing to free memory is the correct way to do it.

Error! Some being tested CHIP-8 instruction not included in the report (e.g. 2242)

Error! Instruction set ordering is not correct in most of the cases.
It is supossed to draw "ok" block in case being tested CHIP-8 instruction succeeded and otherwise draw "no" block.
The problem is that this behaviour depends on the implementation of being tested CHIP-8 instruction and the lack of implementation makes draw block selection fail.
Issue CHIP-8 instruction e.g. 452A, 5560, 462A, 9560, 8750 (+472A), 87B1 (+472B), 8752 (+4718), 8763 (+4767), 8764 (+4718), 8765 (+47EC), 866E (+46C0), 8666 (+4607), 4030, F633 (+F265). 

*** SPRITES

($216) E060 20E0 : "3"
($23E) A040 A0A0 : "x"
($202) EAAC AAEA : "ok"
($206) CEAA AAAE : "no"
($21A) A0E0 2020 : "4"
($21E) 6040 2040 : "5" (Alt: 6040 2060)
($226) E020 2020 : "7" (Alt: E020 6020)
($22E) E0E0 20E0 : "9"
($232) 40A0 E0A0 : "A"
($20A) E0A0 A0E0 : "0"
($236) E0C0 80E0 : "E"
($22A) E0E0 A0E0 : "8"
($20E) C040 40E0 : "1" (Alt: 40C0 40E0)
($212) E020 C0E0 : "2"
($222) E080 E0E0 : "6"
($23A) E080 C080 : "F"

*** CHIP-8 INSTRUCTION TEST SETS

# 3XNN

($25A) A216
($25C) D8B4
($25E) A23E
($260) D9B4
($262) A202
($264) 362B
($266) A206
($268) DAB4

# 4XNN

($26C) A21A
($26E) D8B4
($270) A23E
($272) D9B4
($274) A206
($276) 452A
($278) A202
($27A) DAB4

# 5XY0

($27E) A21E
($280) D8B4
($282) A23E
($284) D9B4
($286) A206
($288) 5560
($28A) A202
($28C) DAB4

# 7XNN

($290) A226
($292) D8B4
($294) A23E
($296) D9B4
($298) A206
($29A) 76FF
($29C) 462A
($29E) A202
($2A0) DAB4

# 9XY0

($2A4) A22E
($2A6) D8B4
($2A8) A23E
($2AA) D9B4
($2AC) A206
($2AE) 9560
($2B0) A202
($2B2) DAB4

# 2NNN

($2B6) A232
($2B8) D8B4
($2BA) A23E
($2BC) D9B4
($2BE) 2242

($242) A202
($244) DAB4

# 00EE

($246) 00EE

($2C8) A20A
($2CA) D8B4
($2CC) A236
($2CE) D9B4
($2D0) A202
($2D2) DAB4

# 8XY0

($2D6) A22A
($2D8) D8B4
($2DA) A20A
($2DC) D9B4
($2DE) A206
($2E0) 8750
($2E2) 472A
($2E4) A202
($2E6) DAB4

# 8XY1

($2EA) A22A
($2EC) D8B4
($2EE) A20E
($2F0) D9B4
($2F2) A206
($2F4) 672A
($2F6) 87B1
($2F8) 472B
($2FA) A202
($2FC) DAB4

# 8XY2

($300) A22A
($302) D8B4
($304) A212
($306) D9B4
($308) A206
($30A) 6678
($30C) 671F
($30E) 8762
($310) 4718
($312) A202
($314) DAB4

# 8XY3

($318) A22A
($31A) D8B4
($31C) A216
($31E) D9B4
($320) A206
($322) 6678
($324) 671F
($326) 8763
($328) 4767
($32A) A202
($32C) DAB4

# 8XY4

($330) A22A
($332) D8B4
($334) A21A
($336) D9B4
($338) A206
($33A) 668C
($33C) 678C
($33E) 8764
($340) 4718
($342) A202
($344) DAB4

# 8XY5

($34E) A22A
($350) D8B4
($352) A21E
($354) D9B4
($356) A206
($358) 668C
($35A) 6778
($35C) 8765
($35E) 47EC
($360) A202
($362) DAB4

# 8XYE

($366) A22A
($368) D8B4
($36A) A222
($36C) D9B4
($36E) A206
($370) 66E0
($372) 866E
($374) 46C0
($376) A202
($378) DAB4

# 8XY6

($37C) A22A
($37E) D8B4
($380) A236
($382) D9B4
($384) A206
($386) 660F
($388) 8666
($38A) 4607
($38C) A202
($38E) DAB4

# FX55 (AND) FX65

($392) A23A
($394) D8B4
($396) A21E
($398) D9B4
($39A) A3E8
($39C) 6000
($39E) 6130
($3A0) F155
($3A2) A3E9
($3A4) F065
($3A6) A206
($3A8) 4030
($3AA) A202
($3AC) DAB4

# FX33

($3B0) A23A
($3B2) D8B4
($3B4) A216
($3B6) D9B4
($3B8) A3E8
($3BA) 6689
($3BC) F633
($3BE) F265

($3C0) A202
($3C2) 3001
($3C4) A206
($3C6) 3103
($3C8) A206
($3CA) 3207
($3CC) A206
($3CE) DAB4

# 1NNN

($3D2) A20E
($3D4) D8B4
($3D6) A23E
($3D8) D9B4
($3DA) 1248

($248) A202
($24A) DAB4
($24C) 13DC

($3DC) 13DC

*** BUGS AND FIX PROPOSALS

Warning! Most of the problems can be solved just changing the order the result sprites are defined (i.e. interchange A202 and A206 instructions)
...

# 2NNN

Sprite "A" is incorrect; should be "2".
Does not print anything if function not implemented.

Fix: ?

# 00EE

This function does not actually check anything; just expect a path to be followed but... What happens when not so?
Check what happens if:
- 2NNN NOT implemented, 00EE NOT implemented
- 2NNN implemented, 00EE NOT implemented
- 2NNN NOT implemented, 00EE implemented
- 2NNN implemented, 00EE implemented

Fix: ?

# 8XY0

"ok" sprite is drawn even if function not implemented.

Fix: Interchange result sprite instructions.

# 8XYE

Draw "6" sprite on instruction name instead of "E".

Fix: Set correct instruction name sprite (i.e. "E").

# 8XY6

Draw "E" sprite on instruction name instead of "6".

Fix: Set correct instruction name sprite (i.e. "6").

# FX55 & FX65

These instructions are being tested in a single test, so single result is printed "F5".

Fix: ?

# 1NNN

Not very convenient to test the last when is being first instruction being executed in the program.
With current test program structure, all the program crashes if this instruction not implemented ( because emulator would start fetching sprite data as opcodes after ignoring very first instruction).

Fix: Move al sprite block at the end of the program, so this instruction is no needed in the begining and therefore can be tested where it already is places (at the very end).

...
